{"version":3,"file":"client.umd.js","sources":["../node_modules/nanoid/url-alphabet/index.cjs","../node_modules/nanoid/index.cjs","../node_modules/url-join/lib/url-join.js","../client/index.js"],"sourcesContent":["// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nmodule.exports = { urlAlphabet }\n","let crypto = require('crypto')\n\nlet { urlAlphabet } = require('./url-alphabet/index.cjs')\n\n// It is best to make fewer, larger requests to the crypto module to\n// avoid system call overhead. So, random numbers are generated in a\n// pool. The pool is a Buffer that is larger than the initial random\n// request size by this multiplier. The pool is enlarged if subsequent\n// requests exceed the maximum buffer size.\nconst POOL_SIZE_MULTIPLIER = 32\nlet pool, poolOffset\n\nlet random = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n\n  let res = pool.subarray(poolOffset, poolOffset + bytes)\n  poolOffset += bytes\n  return res\n}\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  let step = Math.ceil((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let i = step\n      while (i--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let bytes = random(size)\n  let id = ''\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n\nmodule.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","const {\r\n\tnanoid\r\n} = require('nanoid')\r\n\r\nconst urljoin = require('url-join')\r\n\r\nclass Client {\r\n\r\n\tconstructor(path = '/sse', key = nanoid()) {\r\n\t\tthis.events = new Map()\r\n\r\n\t\tconst fullPath = urljoin(path, key)\r\n\r\n\t\tthis.eventSource = new EventSource(fullPath)\r\n\t\tthis.key = key\r\n\r\n\t\tthis.eventSource.addEventListener('open', this.onOpen.bind(this))\r\n\t\tthis.eventSource.addEventListener('error', this.onError.bind(this))\r\n\t\tthis.eventSource.addEventListener('close', this.onClose.bind(this))\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn {\r\n\t\t\t'sse-key-e5b6a1db': this.key\r\n\t\t}\r\n\t}\r\n\r\n\t// addSSEHeadersToAxiosClient(axiosInstance) {\r\n\t// \taxiosInstance.interceptors.request.use(config => {\r\n\t// \t\tconfig.headers['sse-key'] = this.key\r\n\t// \t\treturn config\r\n\t// \t})\r\n\t// }\r\n\r\n\tonOpen(event) {\r\n\t\t// console.log('onOpen')\r\n\t}\r\n\r\n\tonError(event) {\r\n\t\t// console.log('client onError called')\r\n\t}\r\n\r\n\tonClose(event) {\r\n\t\tthis.eventSource.close()\r\n\t\tthis.eventSource = null\r\n\t}\r\n\r\n\taddEventListener(eventName, _callback) {\r\n\r\n\t\t// this assumes a single listener for each event\r\n\r\n\t\tconst callback = event => {\r\n\t\t\tconst type = event.type\r\n\t\t\tconst data = JSON.parse(event.data)\r\n\r\n\t\t\t_callback({\r\n\t\t\t\ttype,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.removeEventListener(eventName)\r\n\t\tthis.events.set(eventName, callback)\r\n\t\tthis.eventSource.addEventListener(eventName, callback)\r\n\t}\r\n\r\n\tremoveEventListener(eventName) {\r\n\t\tconst callback = this.events.get(eventName)\r\n\r\n\t\tif (callback) {\r\n\t\t\tthis.events.delete(eventName)\r\n\t\t\tthis.eventSource.removeEventListener(eventName, callback)\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = Client"],"names":["urlAlphabet","require$$0","POOL_SIZE_MULTIPLIER","pool","poolOffset","random","bytes","length","Buffer","allocUnsafe","crypto","randomFillSync","res","subarray","customRandom","alphabet","size","getRandom","mask","Math","clz32","step","ceil","id","i","customAlphabet","nanoid","name","context","definition","module","exports","this","normalize","strArray","resultArray","TypeError","match","first","shift","replace","component","push","str","join","parts","split","input","arguments","slice","call","Client","path","key","events","Map","fullPath","urljoin","eventSource","EventSource","addEventListener","onOpen","bind","onError","onClose","event","close","eventName","_callback","callback","type","data","JSON","parse","removeEventListener","set","get"],"mappings":"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"}